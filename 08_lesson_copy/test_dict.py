import pytest


# создаём пустой словарь
empty_dict = {}
# пишем тест на проверку длины словаря
def test_empty_dict():
    assert len(empty_dict) == 0
    # чтобы убедиться, что тест работает правильно, нужно его сломать (например, указать длину словаря не 0, а 3)

# создаём новый словарь
football_stats = {
    "Число стран": 48,
    "Страна": "Катар",
    "Участники": ["Австралия", "Англия", "Аргентина", "Бельгия", "еще 42 страны", "Эквадор", "Япония"],
    "Награды": {
        "Золотой мяч": "Лионель Месси",
        "Серебряный мяч": "Килиан Мбаппе",
        "Золотая бутса": "Килиан Мбаппе",
        "Серебряная бутса": "Килиан Мбаппе",
        "Золотой мяч": "Лионель Месси",
        "Больше всего голов": {
            "Игрок": "Килиан Мбаппе - капитан команды",
            "Количество мячей": 8
        }
    }
}

# разные способы проверки!!!
# создаём новый тест на проверку значения любого из ключей
def test_read_value():
    count = football_stats.get("Число стран")
    assert count == 48
    # обращаем внимание на метод гет и ключ в круглых скобках

# создаём новый тест на проверку значения любого из ключей
def test_read_value_():
    country = football_stats["Страна"]
    assert country == "Катар"
    # обращаем внимание на отсутствие метода гет и ключ в квадратных скобках

# создаём новый тест для записи значений
def test_write_new_value():
    # проверяем длину словаря до изменений
    len_before = len(football_stats)
    # добавляем новую пару ключ: значениу
    football_stats["Победитель"] = "Аргентина"
    # проверяем соответствие ключа и его значения
    winner = football_stats["Победитель"]
    assert winner == "Аргентина"
    # проверяем, что длина списка после добавления новой пары увеличилась на 1
    assert len(football_stats) == len_before + 1


# сложные структуры со значением ключа: список или словарь
# список внутри словаря
# тест на запись всех значения ключа в новый список; проверка, что длина списка больше 0
def test_read_list():
    # обращаемся по индексу
    participants = football_stats["Участники"]
    england = football_stats["Участники"][1]
    # проверяем
    assert len(participants) > 0
    assert participants[0] == "Австралия"
    assert england == "Англия"

# словарь внутри словаря
# тест на вывод количества забитых мячей
def test_read_dict():
    total_goals = football_stats["Награды"]["Больше всего голов"]["Количество мячей"]
    assert total_goals == 8

# вычленение словаря в переменную
# тест на запись словаря в переменную
def test_save_dict():
    awards = football_stats["Награды"]
    player = awards["Больше всего голов"]["Игрок"]
    assert player == "Килиан Мбаппе - капитан команды"

# разница между гет и квадратными скобками
def test_read_error():
    value = empty_dict["key"]
    assert value == None
    # тест упадёт: ключа кей нет в словаре

def test_get_empty_or_default():
    value = empty_dict.get("key")
    assert value == None
    # метод гет не выдаст ошибку, и вернёт значение нан


